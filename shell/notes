#!/bin/bash

# OBSERVATIONS
 + Child inherits ENV 
 + GNU99 C CODE
 + signal handler for main process and child process should be different.

# BUILTINS / REDIRECTS
 - fg : only token in line? --- wait for job completion
 - bg : only token in line? -- !wait for job completion 
 - > : followed by file, redirect STDOUT
 - < : followed by file, redirect STDIN. FAIL if !exist
 - cd : first of only two tokens in line, followed by dir
 - jobs : only token in line?
 - & : last token in line ALWAYS, only one -- !wait for job completion
 - | : only one in line separates two commands 
 use boolean flag for each and check invalid combination cases?
 
# BEHAVIOR 
 * after read line check if any job exited ... print to STDOUT if so
 * two commands max (if not using |, only one) per job
 * no STDERR redirects
 * command + args + redirects if any 
 * only one <, and if necessary only before |
 * only one >, and if necessary only after |
 
# waitpid()
'WNOHANG'   
    return immediately if no child has exited.
'WUNTRACED'   
    return if a child has stopped (but not traced via ptrace(2)).  
    Status for traced children which have stopped is provided 
'WCONTINUED'  
    return if a stopped child has been resumed by delivery of SIGCONT.

# W*(status) check
'WIFEXITED'
    returns true if child terminated normally
'WIFCONTINUED'
    returns true if child was resumed by delivery of SIGCONT
'WIFSIGNALED'
    returns true if child was terminated by a signal
'WIFSTOPPED'
    returns true if child was stopped by delivery of a signal; 
    this is possible only if call was done using  WUNTRACED
