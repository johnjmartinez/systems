#!/bin/bash

%% YASHD %%
 - Each client is accepted and served in a thread 
   (code inside thread function will be mostly derived from proj1)
 - use 'reusePort()' to bind to same port each time daemon runs (../misc/TCPServer-ex2.c)
 
    void reusePort(int s) {
        int one=1;
        if ( setsockopt (s, SOL_SOCKET, SO_REUSEADDR, (char *) &one, sizeof(one)) == -1 ) {
	        printf("error in setsockopt,SO_REUSEPORT \n");
	        exit(-1);
	    }
    }    
   
 - commands are executed using fork-exec mechanism (implies MUTEX)
 - client run : yash <SERVER_IP_ADDR> (port is implicit = 3826)
 - client end : ctrl+d (EOF) or 'quit'
 - client --- signal handling 
              ctrl+c will send "CTL c\n" (stop cmd on server)
              ctrl+x will send "CTL z\n" (suspend cmd on server)
 - PROTOCOL
   "CMD <cmd_string>\n" - client
   "CTL <[c|z|d]>\n"    - client
   plain ASCII          - server
   "\n#" prompt (end of receive) - server message delimeter)
   
 - LOGGING 
   threads must perform syslog-like formattedlogging in file /tmp/yashd.log 
   "<date_n_time> yashd[<Client_IP>:<Port>]: <Command_Executed>\n"
   Sep 18 10:02:55 yashd[127.0.0.1:7815]: echo $PATH
 
# http://www.thegeekstuff.com/2012/02/c-daemon-process/
'Daemon Process Design'
+ Create normal process (Parent process)
+ Create child process from above
+ Terminate parent process : child process  becomes orphan and is taken over by init process
+ Call setsid() function to run the process in new session / group : becomes a daemon 
+ Change daemon process WD to root(?) and close stdin, stdout and stderr fds

# http://www.linuxhowtos.org/C_C++/socket.htm
' establishing a socket on client side'
* Create socket() system call
* Connect socket to address of server using connect() system call
* Send/receive data. Simplest is to use the read() and write() system calls.

'establishing a socket on server side'
* Create socket() system call
* Bind socket to address using bind() system call (netinet: port number on host machine)
* Listen for connections with listen() system call
* Accept a connection with accept() system call; typically blocks until a client connects with server.
* Send / receive data.

# https://stackoverflow.com/questions/42643276/how-to-connect-multiple-clients-to-a-single-server-in-c-on-windows-visual-st
> If a connection comes in, 'accept' will give you a new socket object. 
> You still have the original listening socket, which waits for new connections, 
  but you also have a second socket now with an already established connection to a client.
> 'split the work:' Have one go back to calling listen on  original socket and await new connections + 
  other grabs new socket and performs necessary I/O to interact with client

# TIPS
! umask  - specifies processes permissions
! setsid - Set Session Id
! new_sock = malloc(sizeof *new_sock);
! Should not assume null termination - se read_size to terminate the string yourself (and make your buffer bigger by one character)
! Handle SIGPIPE.
! Write is not guaranteed to send a complete message; need to wrap it into a loop  
! its not good idea to access a file descriptor in two threads simultaneously
! have provision to exit infinite while loop on error conditions. Check 'errno' and act upon it accordingly.
! if 'recv' returned zero, other end closed the connection; close socket and exit loop
! 'send' will then fail with "Broken Pipe" error. Quit loop and 'join'
