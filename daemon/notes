#!/bin/bash

%% YASHD %%
 - Each client is accepted and served in a thread 
   (code inside thread function will be mostly derived from proj1)
 - use 'reusePort()' to bind to same port each time daemon runs (../misc/TCPServer-ex2.c)
 
    void reusePort(int s) {
        int one=1;
        if ( setsockopt (s, SOL_SOCKET, SO_REUSEADDR, (char *) &one, sizeof(one)) == -1 ) {
	        printf("error in setsockopt, SO_REUSEPORT \n");
	        exit(-1);
	    }
    }    
   
 - commands are executed using fork-exec mechanism (implies MUTEX)
 - client run : yash <SERVER_IP_ADDR> (port is implicit = 3826)
 - client end : ctrl+d (EOF) or 'quit'
 - client --- signal handling 
              ctrl+c will send "CTL c\n" (stop cmd on server)
              ctrl+x will send "CTL z\n" (suspend cmd on server)
 - PROTOCOL
   "CMD <cmd_string>\n" - client
   "CTL <[c|z|d]>\n"    - client
   plain ASCII          - server
   "\n#" prompt (end of receive) - server message delimeter)
   
 - LOGGING 
   threads must perform syslog-like formatted logging in file /tmp/yashd.log 
   "<date_n_time> yashd[<Client_IP>:<Port>]: <Command_Executed>\n"
   Sep 18 10:02:55 yashd[127.0.0.1:7815]: echo $PATH


# TIPS
! umask  - specifies processes permissions
! setsid - Set Session Id
! new_sock = malloc(sizeof *new_sock);
! Should not assume null termination 
! Handle SIGPIPE.
! Write is not guaranteed to send a complete message; need to wrap it into a loop  
! have provision to exit infinite while loop on error conditions. Check 'errno' and act upon it 
  accordingly.
! if 'recv' returned zero, other end closed the connection; close socket and exit loop
! 'send' will then fail with "Broken Pipe" error. Quit loop and 'join'
