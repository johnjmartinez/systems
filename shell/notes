#!/bin/bash

# OBSERVATIONS
 + Child does NOT inherit signals handlers
 + Child inherits ENV 
 + GNU99 C CODE
 + signal handler for main process and child process should be different.


# BUILTINS
 - fg : only token in line? --- wait for job completion
 - bg : only token in line? -- !wait for job completion 
 - > : followed by file, redirect STDOUT
 - < : followed by file, redirect STDIN. FAIL if !exist
 - cd : first of only two tokens in line, followed by dir
 - jobs : only token in line?
 - & : last token in line ALWAYS, only one -- !wait for job completion
 - | : only one in line separates two commands 
 use boolean flag for each and check invalid combination cases
 
# BEHAVIOR 
 * after read line check if any job exited ... print to STDOUT if so
 * two commands max (if not using |, only one) per job
 * no STDERR redirects?
 * command + args + redirects if any 
 * only one <, and if necessary before > or |
 * only one >, and if necessary only after |
 
# NOT SURE
 % implement + integrate job control table
 % SIGCHLD, SIGCONT? ... SIGTTIN? SIGTTOU? 
 % tcsetpgrp() ... setpgid() ... 


# FROM CANVAS
static void sig_int(int signo) {
  printf("Sending signals to group:%d\n",pid_ch1);
  kill(-pid_ch1,SIGINT);
}
static void sig_tstp(int signo) {
  printf("Sending signals to group:%d\n",pid_ch1); 
  printf("shell PID: %d\n", shell_pgid);
  kill(-pid_ch1,SIGTSTP);

}

The problem is that my waitpid does not appear to be catching the SIGTSTP signal...
 
void waitForSignals(int commandAmnt, bool ISDEBUG) {
    int count = 0;
/*
    while (count < commandAmnt) {
*/
    printf("WAITING...\n");
    pid = waitpid(-1, &status, WUNTRACED | WCONTINUED);

    if (pid == -1) {
        perror("waitpid");
        return EXIT_FAILURE;
    }
    if (pid == -1) {
	    perror("waitpid");
	    exit(EXIT_FAILURE);
	}

    if (WIFEXITED(status))  {
        if (ISDEBUG){ printf("child %d exited, status=%d\n", pid, WEXITSTATUS(status)); count++; }
    } 
    else if (WIFSIGNALED(status)) {
        if (ISDEBUG){ printf("child %d killed by signal %d\n", pid, WTERMSIG(status));count++; }
    } 
    else if (WIFSTOPPED(status)) {
        printf("**********\nSUCCESS!!!\n***********\n");
        if (ISDEBUG){ printf("%d stopped by signal %d\n", pid,WSTOPSIG(status)); }
        //tcsetpgrp(shell_terminal, pid_ch1);
        kill(pid_ch1, SIGSTOP);
    } 
    else if (WIFCONTINUED(status)) {
        if (ISDEBUG){printf("Continuing %d\n",pid);}
        kill(pid, SIGCONT);
    }
    //}
    //exit(0);
    return 1;
}
